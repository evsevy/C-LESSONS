//*********************** © MERKULOV E.V. 2024********************************************//
//Инициализация переменных:
//Инициализация переменных в C++ может быть выполнена разными способами, например:

//1. Инициализация переменных при их объявлении:

int a = 5;
float b = 3.14;

//2. Инициализация переменных позже, после их объявления:

int a;
a = 5;

//Переменные без знака обычно используются для хранения только положительных значений. 
//Например, `unsigned int` может хранить только положительные значения в диапазоне от 0 до 4294967295.

//Пример переменной без знака:

unsigned int x = 10;

//`auto` - это ключевое слово в C++, которое позволяет компилятору самостоятельно определить тип данных переменной на основе выражения,
//к которому она присваивается. Это удобно, когда тип данных переменной длинный и сложный, а точное знание типа не является обязательным.

//Пример использования `auto`:

auto var = 42; // компилятор определит, что переменная var будет типа int


//Использование `auto` может упростить код и уменьшить вероятность ошибок при изменении типов данных. Однако стоит помнить, 
//что целесообразно использовать `auto` в тех случаях, когда тип данных переменной легко определить по контексту.

#include <iostream>
#include <typeinfo>

using namespace std;

int main() {
  // Объявление переменных разных типов и размеров:

  int a = 10;
  long int b = 1000000000;
  short int c = 30000;

  float d = 3.14;
  double e = 1.23456789;
  long double f = 1.23456789123456789;

  char g = 'A';
  wchar_t h = L'Б';

  string i = "Hello, world!";

  bool j = true;

  // Вывод размера и типа переменных на консоль:

  cout << "Переменная a:" << endl;
  cout << "  Тип: " << typeid(a).name() << endl;
  cout << "  Размер: " << sizeof(a) << " байт" << endl;

  cout << "Переменная b:" << endl;
  cout << "  Тип: " << typeid(b).name() << endl;
  cout << "  Размер: " << sizeof(b) << " байт" << endl;

  cout << "Переменная c:" << endl;
  cout << "  Тип: " << typeid(c).name() << endl;
  cout << "  Размер: " << sizeof(c) << " байт" << endl;

  cout << "Переменная d:" << endl;
  cout << "  Тип: " << typeid(d).name() << endl;
  cout << "  Размер: " << sizeof(d) << " байт" << endl;

  cout << "Переменная e:" << endl;
  cout << "  Тип: " << typeid(e).name() << endl;
  cout << "  Размер: " << sizeof(e) << " байт" << endl;

  cout << "Переменная f:" << endl;
  cout << "  Тип: " << typeid(f).name() << endl;
  cout << "  Размер: " << sizeof(f) << " байт" << endl;

  cout << "Переменная g:" << endl;
  cout << "  Тип: " << typeid(g).name() << endl;
  cout << "  Размер: " << sizeof(g) << " байт" << endl;

  cout << "Переменная h:" << endl;
  cout << "  Тип: " << typeid(h).name() << endl;
  cout << "  Размер: " << sizeof(h) << " байт" << endl;

  cout << "Переменная i:" << endl;
  cout << "  Тип: " << typeid(i).name() << endl;
  cout << "  Размер: " << sizeof(i) << " байт" << endl;

  cout << "Переменная j:" << endl;
  cout << "  Тип: " << typeid(j).name() << endl;
  cout << "  Размер: " << sizeof(j) << " байт" << endl;

  return 0;
}

//Потоки ввода и вывода:

#include<iostream>
using namespace std;

int main()
{
	int num = 0, t = 0;
	cout << "Input number: " << endl;
	cout << "==>";
	cin >> num;
	while (num)
	{
		num = num / 2;
		t = num % 2;
		cout << t;

	}
	cout << num<<endl;


	return 0;
}

//Пример применения булевых типов данных с циклами и ветвлениями в языке С++:

#include <iostream>

int main() {
    bool isEven; // объявляем переменную типа bool для проверки четности числа
    int number;

    std::cout << "Введите число: ";
    std::cin >> number;

    if (number % 2 == 0) {
        isEven = true; // если число четное, переменная isEven будет равна true
    } else {
        isEven = false; // если число нечетное, переменная isEven будет равна false
    }

    // используем цикл для вывода сообщения о четности числа
    for (int i = 0; i < 3; i++) {
        if (isEven) {
            std::cout << "Число " << number << " четное" << std::endl;
        } else {
            std::cout << "Число " << number << " нечетное" << std::endl;
        }
    }

    return 0;
}

/*
В данном примере мы объявляем переменную типа bool для проверки четности числа, 
запрашиваем у пользователя число, проверяем его на четность и записываем результат в переменную isEven. 
Затем используем цикл for для вывода сообщения о четности числа на экран несколько раз.
*/

// Пример кода с бесконечным циклом и условным прерыванием
/*
#include <iostream>

int main() {
    int num;

    while (true) {
        std::cout << "Введите целое число или введите 0 для выхода: ";
        std::cin >> num;

        if (num == 0) {
            std::cout << "Программа завершена.";
            break; // условное прерывание цикла
        }
        
        // Здесь можно добавить другую логику обработки введенных чисел
        
    }

    return 0;
}
*/
//Пример кода "while (True)" с комментарием может быть применен в ситуациях, 
//когда требуется создать бесконечный цикл, который будет выполняться до тех пор, пока условие True не изменится.

/*
#include <iostream>

int main() {
    while (true) {
        std::cout << "Этот цикл выполняется бесконечно!" << std::endl;
    }

    return 0;
}
/*
В данном примере кода, условие "True" всегда остается истинным, 
что приводит к бесконечному выполнению цикла. 
Такой подход может быть использован, например, 
при реализации основного цикла обработки событий в приложении или при написании программы, 
которая должна работать непрерывно без завершения.
Однако, следует быть осторожным при использовании бесконечных циклов, 
так как они могут привести к зависанию программы или выходу ее из строя.
*/
/*
Пример кода на C++ с таймером задержки и комментарием может быть использован, 
например, для процесса ожидания определенного времени перед выполнением 
следующего действия в программе. 
Например, если вам нужно сделать паузу в программе перед выводом следующего 
сообщения или выполнением определенной операции.
Ниже представлен пример кода на C++ с таймером задержки и комментарием:
*/
/*
#include <iostream>
#include <chrono>
#include <thread>

int main() {
    // Время задержки в миллисекундах
    int delay = 1000; // 1 секунда

    std::cout << "Начало программы" << std::endl;

    while (true) {
        // Пауза перед выполнением следующего действия
        std::this_thread::sleep_for(std::chrono::milliseconds(delay));

        // Действие, которое нужно выполнить после задержки
        std::cout << "Прошло " << (delay/1000) << " секунд" << std::endl;
    }

    return 0;
}
/*
В этом примере кода программа будет выводить сообщение каждую секунду, 
используя таймер задержки в 1 секунду. Этот код может быть использован, 
например, для имитации ожидания ответа от устройства или сервера, 
или для управления таймингом различных операций в программе.
*/
//-----------------------------------------------------------------------------//
//пример кода на C++, который выводит список чисел от 0 до 1000 с задержкой 
//и возвращает отсчет обратно при достижении числа 1000:

#include <iostream>
#include <chrono>
#include <thread>

int main() {
    // вывод списка чисел от 0 до 1000
    for(int i = 0; i <= 100; i++) {
        std::cout << i << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(100)); // задержка 100 миллисекунд
    }

    // возврат отсчета обратно
    for(int i = 100; i >= 0; i--) {
        std::cout << i << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(100)); // задержка 100 миллисекунд
    }

    return 0;
}
//Пример кода на C++ с таймером задержки и комментарием может быть использован, например, 
//для процесса ожидания определенного времени перед выполнением следующего действия в программе. 
//Например, если вам нужно сделать паузу в программе перед выводом следующего сообщения или выполнением определенной операции.

//Ниже представлен пример кода на C++ с таймером задержки и комментарием:


#include <iostream>
#include <chrono>
#include <thread>

int main() {
    // Время задержки в миллисекундах
    int delay = 1000; // 1 секунда

    std::cout << "Начало программы" << std::endl;

    while (true) {
        // Пауза перед выполнением следующего действия
        std::this_thread::sleep_for(std::chrono::milliseconds(delay));

        // Действие, которое нужно выполнить после задержки
        std::cout << "Прошло " << (delay/1000) << " секунд" << std::endl;
    }

    return 0;
}

//В этом примере кода программа будет выводить сообщение каждую секунду, используя таймер задержки в 1 секунду. 
//Этот код может быть использован, например, для имитации ожидания ответа от устройства или сервера, или для управления таймингом различных операций в программе.

// Пример кода с бесконечным циклом и условным прерыванием
/*
#include <iostream>

int main() {
    int num;

    while (true) {
        std::cout << "Введите целое число или введите 0 для выхода: ";
        std::cin >> num;

        if (num == 0) {
            std::cout << "Программа завершена.";
            break; // условное прерывание цикла
        }
        
        // Здесь можно добавить другую логику обработки введенных чисел
        
    }

    return 0;
}
*/
//Пример кода "while (True)" с комментарием может быть применен в ситуациях, 
//когда требуется создать бесконечный цикл, который будет выполняться до тех пор, пока условие True не изменится.

/*
#include <iostream>

int main() {
    while (true) {
        std::cout << "Этот цикл выполняется бесконечно!" << std::endl;
    }

    return 0;
}
/*
В данном примере кода, условие "True" всегда остается истинным, 
что приводит к бесконечному выполнению цикла. 
Такой подход может быть использован, например, 
при реализации основного цикла обработки событий в приложении или при написании программы, 
которая должна работать непрерывно без завершения.
Однако, следует быть осторожным при использовании бесконечных циклов, 
так как они могут привести к зависанию программы или выходу ее из строя.
*/
/*
Пример кода на C++ с таймером задержки и комментарием может быть использован, 
например, для процесса ожидания определенного времени перед выполнением 
следующего действия в программе. 
Например, если вам нужно сделать паузу в программе перед выводом следующего 
сообщения или выполнением определенной операции.
Ниже представлен пример кода на C++ с таймером задержки и комментарием:
*/
/*
#include <iostream>
#include <chrono>
#include <thread>

int main() {
    // Время задержки в миллисекундах
    int delay = 1000; // 1 секунда

    std::cout << "Начало программы" << std::endl;

    while (true) {
        // Пауза перед выполнением следующего действия
        std::this_thread::sleep_for(std::chrono::milliseconds(delay));

        // Действие, которое нужно выполнить после задержки
        std::cout << "Прошло " << (delay/1000) << " секунд" << std::endl;
    }

    return 0;
}

// Пример кода с бесконечным циклом и условным прерыванием

#include <iostream>

int main() {
    int num;

    while (true) {
        std::cout << "Введите целое число или введите 0 для выхода: ";
        std::cin >> num;

        if (num == 0) {
            std::cout << "Программа завершена.";
            break; // условное прерывание цикла
        }
        
        // Здесь можно добавить другую логику обработки введенных чисел
        
    }

    return 0;
}
