/******************************************************************************
                                УРОК 16
                          © MERKULOV E.V. 2024
*******************************************************************************/
/*
С++ 17 ввел новый механизм - асинхронные операции, 
которые позволяют выполнять операции в фоновом режиме без блокировки основного потока выполнения. 
Пример использования асинхронных операций в C++ 17:
*/
#include <iostream>
#include <future>

int main() {
    // Создаем асинхронную операцию
    std::future<int> future_result = std::async(std::launch::async, [](){
        // Этот код будет выполнен в фоновом потоке
        return 42;
    });

    // Получаем результат асинхронной операции
    int result = future_result.get();

    std::cout << "Результат: " << result << std::endl;

    return 0;
}
/*
В данном примере создается асинхронная операция, которая вычисляет значение 42 в фоновом потоке. 
Мы затем ожидаем завершения операции и получаем результат. Это позволяет выполнять длительные операции 
параллельно с основным потоком выполнения, не блокируя его.
В C++ 17 также были добавлены новые функции и классы для работы с асинхронными операциями, 
такие как `std::async`, `std::future`, `std::promise` и другие. 
Эти классы и функции облегчают написание асинхронного кода и управление потоками выполнения.
Кроме того, C++ 17 ввел поддержку кооперативной многозадачности, 
что облегчает программирование асинхронных операций без явного использования многопоточности. 
Таким образом, C++ 17 предоставляет мощный и удобный механизм для работы с асинхронными операциями, 
что делает разработку параллельных программ более эффективной и производительной.
*/
/*
Вот пример кода на C++, который демонстрирует использование двух потоков для выполнения двух функций вычисления,
одна из которых выполняется фоново с помощью `std::async`:
*/
#include <iostream>
#include <thread>
#include <future>
#include <chrono>

// Функция для вычисления суммы чисел от 1 до n
int sum(int n) {
    int result = 0;
    for (int i = 1; i <= n; i++) {
        result += i;
    }
    return result;
}

// Функция, которая будет выполнена фоново с помощью std::async
void backgroundTask() {
    // Вычисление суммы чисел от 1 до 1000000
    int result = sum(1000000);
    std::cout << "Сумма чисел от 1 до 1000000: " << result << std::endl;
}

int main() {
    // Создаем поток для выполнения фоновой задачи
    std::future<void> fut = std::async(std::launch::async, backgroundTask);

    // Ожидаем завершения вычисления в фоновом потоке
    fut.wait();
    
    // Выполнение вычисления в основном потоке
    int result = sum(100);
    std::cout << "Сумма чисел от 1 до 100: " << result << std::endl;

    return 0;
}
/*
В этом примере `backgroundTask` выполняется в фоновом потоке с помощью `std::async`, 
а функция `sum` запускается в основном потоке. Обе функции вычисляют сумму чисел от 1 до заданного числа `n`.
Программа создает фоновый поток для выполнения `backgroundTask` с помощью `std::async`,
ожидает завершения фоновой задачи и затем выполняет вычисление в основном потоке.
Выходные данные программы будут содержать результаты вычислений в обоих потоках.
*/
/*
C++17 - это последняя версия стандарта языка программирования C++, введенная в 2017 году. 
Несколько новых возможностей были добавлены в этой версии для улучшения производительности, 
безопасности и читаемости кода. Ниже приведены некоторые из них с примерами:
*/

//1. Инициализация переменных if с помощью if

if (auto x = foo(); x > 0) {
    // делать что-то с x
} else {
    // делать что-то еще
}

//2. std::optional

#include <iostream>
#include <optional>

std::optional<int> divide(int a, int b) {
    if (b != 0) {
        return a / b;
    }
    return std::nullopt;
}

int main() {
    auto result = divide(10, 2);
    
    if (result.has_value()) {
        std::cout << "Результат деления: " << result.value() << std::endl;
    } else {
        std::cout << "Ошибка: деление на ноль" << std::endl;
    }
    
    return 0;
}


//3. Новый оператор коммуникации для switch

#include <iostream>

int main() {
    int x = 2;
    switch (x) {
        case 1:
            std::cout << "x равен 1" << std::endl;
            break;
        case 2:
            std::cout << "x равен 2" << std::endl;
            break;
        default:
            std::cout << "x не равен 1 или 2" << std::endl;
    }
    
    return 0;
}

